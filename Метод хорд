double chord_method(double a, double b, double tol) {
    double x_tilda;
    iter = 0;
    if (derivative(a) < 0 && derivative(b) < 0) return b;
    if (derivative(a) > 0 && derivative(b) > 0) return a;
    while (fabs(b - a) > tol) {
        iter++; // Увеличиваем счётчик итераций
        // Проверка на деление на ноль
        if (fabs(derivative(a) - derivative(b)) < 1e-9) {
            cerr << "Ошибка: деление на ноль при вычислении x_tilda" << endl;
            return (a + b) / 2;
        }

        // Вычисляем новую точку по формуле метода хорд
        x_tilda = a - derivative(a) * (a - b) / (derivative(a) - derivative(b));

        cout << "Итерация " << left << setw(4) << iter
            << " | a = " << left << setw(15) << a << " b = " << left << setw(15) << b << " x = " << left << setw(15) << x_tilda
            << "f'(x) = " << left << setw(15) << derivative(x_tilda)
            << "f(x) = " << left << setw(15) << function(x_tilda) << endl;

        // Проверяем условие завершения
        if (fabs(derivative(x_tilda)) <= tol) {
            return x_tilda;
        }

        // Определяем новый интервал поиска
        if (derivative(x_tilda) > 0) {
            b = x_tilda;
        }
        else {
            a = x_tilda;
        }
    }

    cout << "\n------------\nИтераций - " << iter << endl;

    return (a + b) / 2; // Возвращаем середину оставшегося интервала
}


